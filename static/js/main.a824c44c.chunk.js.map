{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Users/users.module.css","components/Profile/MyPosts/Post/Post.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","App.tsx","index.tsx","components/Navbar/Navbar.module.css"],"names":["module","exports","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","Date","getTime","newText","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","dialogs","name","avatar","messages","newMessageBody","dialogsReducer","body","sidebarReducer","users","FOLLOW","UNFOLLOW","SET_USERS","usersReducer","map","u","userId","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","store","createStore","window","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeLink","active","News","props","Music","Settings","DialogItem","dialog","path","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","value","onChange","e","target","updateNewMessageBody","placeholder","onClick","sendMessage","DialogsContainer","connect","dispatch","Users","length","setUsers","photoUrl","fullName","status","location","country","city","styles","userPhoto","unfollow","follow","UsersContainer","followAC","unfollowAC","setUsersAC","Post","post","MyPosts","postsElements","p","postsBlock","updateNewPostText","addPost","MyPostsContainer","text","updateNewPostTextActionCreator","App","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a824c44c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2nlwz\",\"dialogsItems\":\"Dialogs_dialogsItems__3WhVI\",\"dialog\":\"Dialogs_dialog__2-7B6\",\"active\":\"Dialogs_active__1xZLE\",\"messages\":\"Dialogs_messages__zp7l7\",\"message\":\"Dialogs_message__1vNic\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1236P\",\"posts\":\"MyPosts_posts__1D1-Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2E4oA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__UrRW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__2J-eP\",\"item\":\"Post_item__2ttnA\"};","import {ActionType} from \"./store\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 15},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 20},\r\n        {id: 3, message: 'It\\'s my second post', likesCount: 13},\r\n        {id: 4, message: 'It\\'s my third post', likesCount: 7},\r\n        {id: 5, message: 'It\\'s my fourth post', likesCount: 3}\r\n    ],\r\n    newPostText: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state:InitialStateType = initialState, action: ActionType):InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({\r\n    type: ADD_POST\r\n}) as const\r\n\r\nexport const updateNewPostTextActionCreator = (text: string) => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText: text\r\n}) as const\r\n\r\nexport default profileReducer","import {ActionType} from \"./store\";\r\n\r\nexport type MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY'\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych', avatar: ''},\r\n        {id: 2, name: 'Andrey', avatar: ''},\r\n        {id: 3, name: 'Sveta', avatar: ''},\r\n        {id: 4, name: 'Sasha', avatar: ''},\r\n        {id: 5, name: 'Victor', avatar: ''},\r\n        {id: 6, name: 'Valera', avatar: ''}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>,\r\n    newMessageBody: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state:InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case UPDATE_NEW_MESSAGE_BODY: {\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        }\r\n        case SEND_MESSAGE: {\r\n            let body = state.newMessageBody\r\n         return  {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE}) as const\r\n\r\nexport const updateNewMessageBodyCreator = (text: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    body: text\r\n}) as const\r\n\r\nexport default dialogsReducer","import {ActionType} from \"./store\";\r\n\r\nconst initialState={}\r\n\r\nconst sidebarReducer=(state: any=initialState,action: ActionType)=>{\r\n\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {ActionType} from \"./store\";\r\n\r\nexport type UserType={\r\n    id: number\r\n    photoUrl: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: UserLocationType\r\n}\r\n\r\nexport type UserLocationType= {\r\n    country: string\r\n    city: string\r\n\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users:  [\r\n        // {\r\n        //     id: 1,\r\n        //     photoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Dmitry_Nagiev_2017_4.jpg/274px-Dmitry_Nagiev_2017_4.jpg',\r\n        //     followed: true,\r\n        //     fullName: 'Dmitry',\r\n        //     status: 'I am a boss',\r\n        //     location: {city: 'Minsk', country: 'Belarus'}\r\n        // },\r\n        // {\r\n        //     id: 2,\r\n        //     photoUrl:'https://vokrug-tv.ru/pic/person/d/0/9/f/d09fc84f3e517a70e5223d4006a938c3.jpg',\r\n        //     followed: true,\r\n        //     fullName: 'Sasha',\r\n        //     status: 'I am a boss too',\r\n        //     location: {city: 'Moscow', country: 'Russia'}\r\n        // },\r\n        // {\r\n        //     id: 3,\r\n        //     photoUrl: 'https://icdn.lenta.ru/images/2020/12/30/10/20201230105557812/pwa_list_rect_320_3c73451360bb5c45b188eb2719d077da.jpg',\r\n        //     followed: false,\r\n        //     fullName: 'Andrew',\r\n        //     status: 'I am a boss too',\r\n        //     location: {city: 'Kiev', country: 'Ukraine'}\r\n        // },\r\n    ],\r\n\r\n\r\n\r\n}\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\n\r\nconst usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n           return{\r\n               ...state,\r\n               users: [...state.users, ...action.users]\r\n           }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollowAC = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\n\r\n\r\n\r\nexport default usersReducer","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\n// export type MessageType = {\r\n//     id: number,\r\n//     message: string\r\n// }\r\n//\r\n// export type DialogsType = {\r\n//     id: number,\r\n//     name: string\r\n// }\r\n//\r\n// export type PostType = {\r\n//     id: number,\r\n//     message: string,\r\n//     likesCount: number\r\n// }\r\n//\r\n// export type DialogsPageType = {\r\n//     dialogs: Array<DialogsType>,\r\n//     messages: Array<MessageType>,\r\n//     newMessageBody: string\r\n// }\r\n//\r\n// export type ProfilePageType = {\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n// }\r\n//\r\n// export type SidebarType = {}\r\n//\r\n// export type RootStateType = {\r\n//     profilePage: ProfilePageType,\r\n//     dialogsPage: DialogsPageType,\r\n//     sidebar: SidebarType\r\n// }\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type ReduxStoreType  = typeof  store\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store\r\n\r\nexport default store","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://go.imgsmail.ru/imgpreview?key=28651f27816ee8f0&mb=imgdb_preview_exp'/>\r\n        </header>\r\n    );\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\ntype NewsPropsType = {\r\n\r\n}\r\n\r\nconst News=(props: NewsPropsType)=>{\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\ntype MusicPropsType = {\r\n\r\n}\r\n\r\n\r\nconst Music=(props: MusicPropsType)=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\ntype SettingsPropsType={\r\n\r\n}\r\n\r\nconst Settings=(props: SettingsPropsType )=>{\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst DialogItem = (dialog: DialogType) => {\r\n    let path = \"/dialogs/\" + dialog.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{dialog.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message = (message: MessageType) => {\r\n    return <div className={s.dialog}>{message.message}</div> //message:....??????\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements =\r\n        state.dialogs.map(d => <DialogItem id={d.id} key={d.id } name={d.name} avatar={d.avatar}/>);\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message id={m.id} key={m.id } message={m.message}/>)\r\n\r\n    let newMessageBody =\r\n        state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n        // store.dispatch(sendMessageCreator())\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.updateNewMessageBody(body)\r\n        // store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}\r\n                    <div/>\r\n                    <div>\r\n                        <div><textarea value={newMessageBody}\r\n                                       onChange={onNewMessageChange}\r\n                                       placeholder='Enter your message'></textarea></div>\r\n                        <div>\r\n                            <button onClick={onSendMessageClick}>Send</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {InitialStateType, sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: ()=> void\r\n    updateNewMessageBody: (body: string)=> void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage :()=>{\r\n            dispatch(sendMessageCreator())\r\n        },\r\n        updateNewMessageBody:(body: string)=>{\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs) //вызываем функцию 2 раза: вызываем функцию connect, она возвращает другую функцию , которую мы вызываем\r\n\r\nexport default DialogsContainer;","import React from \"react\";\r\nimport styles from './users.module.css'\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n\r\n    if (props.usersPage.users.length === 0) {\r\n        props.setUsers([\r\n            {\r\n                id: 1,\r\n                photoUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Dmitry_Nagiev_2017_4.jpg/274px-Dmitry_Nagiev_2017_4.jpg',\r\n                followed: true,\r\n                fullName: 'Dmitry',\r\n                status: 'I am a boss',\r\n                location: {country: 'Belarus', city: 'Minsk'}\r\n            },\r\n            {\r\n                id: 2,\r\n                photoUrl: 'https://vokrug-tv.ru/pic/person/d/0/9/f/d09fc84f3e517a70e5223d4006a938c3.jpg',\r\n                followed: true,\r\n                fullName: 'Sasha',\r\n                status: 'I am a boss too',\r\n                location: {country: 'Russia', city: 'Moscow'}\r\n            },\r\n            {\r\n                id: 3,\r\n                photoUrl: 'https://icdn.lenta.ru/images/2020/12/30/10/20201230105557812/pwa_list_rect_320_3c73451360bb5c45b188eb2719d077da.jpg',\r\n                followed: false,\r\n                fullName: 'Andrew',\r\n                status: 'I am a boss too',\r\n                location: {country: 'Ukraine', city: 'Kiev'}\r\n            },\r\n        ])\r\n    }\r\n    return <div>\r\n        {\r\n            props.usersPage.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <img src={u.photoUrl} className={styles.userPhoto}/>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>Unfollow </button>\r\n                            : <button onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}>Follow</button>}\r\n\r\n                    </div>\r\n                    \r\n                </span>\r\n                    <span>\r\n                    <span>\r\n                        <div>{u.fullName}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.location.country}</div>\r\n                        <div>{u.location.city}</div>\r\n                    </span>\r\n                    \r\n                </span>\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {followAC, InitialStateType, setUsersAC, unfollowAC, UserType} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage    //??????????????? users: state.usersPage.users\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {   // Dispatch имортировать из REDUX !!!!!!\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UserType>) => {\r\n            dispatch(setUsersAC(users))\r\n        }\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\nexport type PostPropsType = {\r\n    post: PostType\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQYtfZRhbGQtq2BapB2MXJfWIO2QriO5Wx3qQ&usqp=CAU'/>\r\n\r\n            {props.post.message}\r\n            <div>\r\n                <span>like </span>\r\n                {props.post.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    const postsElements =\r\n        props.posts.map(p => <Post post={p}/>);\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n        // props.dispatch(addPostActionCreator(props.newPostText))\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newPostText = e.target.value\r\n        props.updateNewPostText(newPostText)      //??????????????????????????????\r\n        // props.dispatch(updateNewPostTextActionCreator(newPostText))\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        value={props.newPostText}\r\n                        onChange={onPostChange}\r\n                        placeholder='Enter your message'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {\r\n    addPostActionCreator,\r\n    PostType,\r\n    updateNewPostTextActionCreator\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n// export type MyPostsPropsType = {\r\n//     store: ReduxStoreType\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost:() => void\r\n    updateNewPostText:(text: string)=> void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost:()=>{\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText:(text: string)=>{\r\n            dispatch(updateNewPostTextActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport { Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport Profile from \"./components/Profile/Profile\";\nimport {ActionType} from \"./redux/store\";\nimport {AppStateType, ReduxStoreType} from './redux/redux-store';\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport MyPostsContainer from \"./components/Profile/MyPosts/MyPostsContainer\";\n\n\ntype AppPropsType ={\n    // store:ReduxStoreType\n    // state: AppStateType\n    // dispatch: (action: ActionType)=>void\n    // addPostCallback: (newPostText: string) => void\n    // updateNewPostTextCallback: (newText: string) => void\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n\n\n  return (\n      <div className='app-wrapper'>\n        <Header/>\n        <Navbar/>\n        <div className='app-wrapper-content'>\n\n          <Route path='/news' component={News}/>\n          <Route path='/music' component={Music}/>\n          <Route path='/settings' component={Settings}/>\n\n          <Route path='/profile'\n                 render={() => <MyPostsContainer\n                     //Profile\n                     // store={props.store}\n                     // profilePage={props.store.getState().profilePage}\n                     //  dispatch={props.store.dispatch.bind(props.store)}\n                 />}/>\n          <Route path='/dialogs'\n                 render={() => <DialogsContainer\n                     // store={props.store}\n                     // dialogsPage={props.store.getState().dialogsPage}\n                     // dispatch={props.store.dispatch.bind(props.store)}\n\n                 />}/>\n\n            <Route path='/users'\n                   render={() => <UsersContainer/>}/>\n\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport React from \"react\";\nimport {Provider} from \"react-redux\";\n\n\n\n\n\nlet rerenderEntireTree =()=>{\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store ={store}>\n            <App\n                // state={store.getState() }\n                // store={store}\n                // dispatch={store.dispatch.bind(store.dispatch)}  //bind - связывать\n            />\n            </Provider>\n        </HashRouter>,\n        document.getElementById('root')\n    );\n}\nrerenderEntireTree()\n//\n// store.subscribe(()=> {\n//     let state=store.getState()\n//     rerenderEntireTree()\n// })\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2-CKD\",\"item\":\"Navbar_item__39EIq\",\"activeLink\":\"Navbar_activeLink__pNwgl\"};"],"sourceRoot":""}