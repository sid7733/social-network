{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/users.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/preloader.svg","components/common/preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx","assets/images/user.png","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","authAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","initialState","posts","id","message","likesCount","newPostText","profile","profileReducer","state","action","type","newPost","Date","getTime","newText","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","dialogs","name","avatar","messages","newMessageBody","dialogsReducer","body","sidebarReducer","users","totalUsersCount","isFetching","followingInProgress","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","setCurrentPage","toggleIsFetching","toggleFollowingProgress","usersReducer","map","u","followed","filter","email","login","isAuth","SET_AUTH_USER_DATA","authReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","props","Music","Settings","DialogItem","dialog","path","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","value","onChange","e","target","updateNewMessageBody","placeholder","onClick","sendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","compose","dispatch","Preloader","src","preloader","ProfileStatus","editMode","title","activateEditMode","console","log","setState","deactivateEditMode","this","onDoubleClick","status","autoFocus","onBlur","bind","React","ProfileInfo","descriptionBlock","alt","photos","large","contacts","facebook","lookingForAJob","lookingForAJobDescription","fullName","Post","MyPosts","postsElements","p","postsBlock","updateNewPostText","addPost","MyPostsContainer","text","Profile","ProfileContainer","match","params","getUserProfile","withRouter","Users","pagesCount","Math","ceil","pages","i","push","styles","selectedPage","onPageChanged","small","userPhoto","disabled","some","unfollow","follow","UsersContainer","pageNumber","getUsers","resultCode","followSuccess","unfollowSuccess","items","totalCount","Header","header","loginBlock","HeaderContainer","getAuthUserData","setAuthUserData","Login","App","component","render","DialogsContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4239d6f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__GRwif\",\"dialogsItems\":\"Dialogs_dialogsItems__33DUg\",\"dialog\":\"Dialogs_dialog__2FwmF\",\"active\":\"Dialogs_active__1Lumf\",\"messages\":\"Dialogs_messages__3m-dh\",\"message\":\"Dialogs_message__1sW2f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2T9np\",\"posts\":\"MyPosts_posts__w1pCc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__rkG1r\",\"selectedPage\":\"users_selectedPage__zTTFg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__vtvPY\",\"loginBlock\":\"Header_loginBlock__10pv7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__15J2f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__ZrBnO\",\"item\":\"Post_item__156tL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1rU9W\",\"item\":\"Navbar_item__1D8mI\",\"activeLink\":\"Navbar_activeLink__1VgLz\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '6b7e1966-7934-4398-949c-b07e4c978469'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number){\r\n        return instance.get(`profile/` + userId)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get(`auth/me`)\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionType, AppStateType} from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\r\nconst SET_USER_PROFILE='SET_USER_PROFILE'\r\n\r\n\r\n\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nexport type InitialStateType={\r\n    posts: Array<PostType>,\r\n    newPostText: string,\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\nexport type ProfileType={\r\n    userId: number,\r\n    status: string,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType,\r\n    photos: PhotosType,\r\n}\r\n\r\ntype ContactsType = {\r\n    github: string,\r\n    vk: string,\r\n    facebook: string,\r\n    instagram: string,\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string,\r\n}\r\n\r\ntype PhotosType={\r\n    small:string,\r\n    large: string\r\n}\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 15},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 20},\r\n        {id: 3, message: 'It\\'s my second post', likesCount: 13},\r\n        {id: 4, message: 'It\\'s my third post', likesCount: 7},\r\n        {id: 5, message: 'It\\'s my fourth post', likesCount: 3}\r\n    ],\r\n    newPostText: '',\r\n    profile: null\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_USER_PROFILE:{\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const addPost = () => ({ type: ADD_POST}) as const\r\nexport const updateNewPostText = (text: string) => ({type: UPDATE_NEW_POST_TEXT, newText: text}) as const\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile: profile}) as const\r\n\r\nexport type ProfileActionType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof updateNewPostText> |\r\n    ReturnType<typeof setUserProfile>\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => (dispatch: ThunkDispatchType )=> {\r\n    usersAPI.getProfile(userId)\r\n        .then(response => {\r\n\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n}\r\n\r\n\r\nexport default profileReducer","\r\n\r\nexport type MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY'\r\n\r\nexport type DialogsActionType =  ReturnType<typeof sendMessageCreator> |\r\n    ReturnType<typeof updateNewMessageBodyCreator>\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych', avatar: ''},\r\n        {id: 2, name: 'Andrey', avatar: ''},\r\n        {id: 3, name: 'Sveta', avatar: ''},\r\n        {id: 4, name: 'Sasha', avatar: ''},\r\n        {id: 5, name: 'Victor', avatar: ''},\r\n        {id: 6, name: 'Valera', avatar: ''}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>,\r\n    newMessageBody: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state:InitialStateType = initialState, action: DialogsActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case UPDATE_NEW_MESSAGE_BODY: {\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        }\r\n        case SEND_MESSAGE: {\r\n            let body = state.newMessageBody\r\n         return  {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE}) as const\r\n\r\nexport const updateNewMessageBodyCreator = (text: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    body: text\r\n}) as const\r\n\r\nexport default dialogsReducer","import {setAuthUserData} from \"./auth-reducer\";\r\n\r\n\r\nconst initialState={}\r\n\r\nexport type SidebarActionType = ReturnType<typeof setAuthUserData>  //need to fix\r\n\r\nconst sidebarReducer=(state: any=initialState,action: SidebarActionType)=>{\r\n\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {usersAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionType, AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: {small: string, large: string}\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: UserLocationType\r\n}\r\n\r\nexport type UserLocationType = {\r\n    country: string\r\n    city: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst FOLLOW_SUCCESS = 'FOLLOW_SUCCESS'\r\nconst UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nexport type UsersActionType = ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nconst usersReducer = (state: InitialStateType= initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW_SUCCESS, userId}) as const\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW_SUCCESS, userId}) as const\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nexport const getUsers = (pageNumber: number, pageSize: number): ThunkType => {\r\n    debugger\r\n    return (dispatch: ThunkDispatchType) => {\r\n            dispatch(toggleIsFetching(true))\r\n\r\n        usersAPI.getUsers(pageNumber, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setCurrentPage(pageNumber))\r\n                console.log(data)\r\n                dispatch(setTotalUsersCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {authAPI} from \"../api/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {ActionType, AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    userId:  number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    userId:  null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA'\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number, email: string, login: string) => ({   //??? нужно ли добавить в тип |null ???\r\n    type: SET_AUTH_USER_DATA, data: {userId, email, login}}) as const\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nexport const getAuthUserData = (): ThunkType=>(dispatch: ThunkDispatchType)=>{\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode===0){\r\n                let {id,  email, login} = response.data.data\r\n                dispatch(setAuthUserData (id,  email, login))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n\r\nexport default authReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {addPost, ProfileActionType, updateNewPostText} from \"./profile-reducer\";\r\nimport dialogsReducer, {DialogsActionType, sendMessageCreator, updateNewMessageBodyCreator} from \"./dialogs-reducer\";\r\nimport sidebarReducer, {SidebarActionType} from \"./sidebar-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reducer\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionType = UsersActionType |\r\n    ProfileActionType |\r\n    DialogsActionType |\r\n    AuthActionType |\r\n    SidebarActionType\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type ReduxStoreType  = typeof  store\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store\r\n\r\nexport default store","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\ntype NewsPropsType = {\r\n\r\n}\r\n\r\nconst News=(props: NewsPropsType)=>{\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\ntype MusicPropsType = {\r\n\r\n}\r\n\r\n\r\nconst Music=(props: MusicPropsType)=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\ntype SettingsPropsType={\r\n\r\n}\r\n\r\nconst Settings=(props: SettingsPropsType )=>{\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst DialogItem = (dialog: DialogType) => {\r\n    let path = \"/dialogs/\" + dialog.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{dialog.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message = (message: MessageType) => {\r\n    return <div className={s.dialog}>{message.message}</div> //message:....??????\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements =\r\n        state.dialogs.map(d => <DialogItem id={d.id} key={d.id } name={d.name} avatar={d.avatar}/>);\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message id={m.id} key={m.id } message={m.message}/>)\r\n\r\n    let newMessageBody =\r\n        state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.updateNewMessageBody(body)\r\n    }\r\n\r\n    /*if (!props.isAuth) return <Redirect to=\"/login\"/>*/ //проверить нужна ли эта строка?????\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}\r\n                    <div/>\r\n                    <div>\r\n                        <div><textarea value={newMessageBody}\r\n                                       onChange={onNewMessageChange}\r\n                                       placeholder='Enter your message'></textarea></div>\r\n                        <div>\r\n                            <button onClick={onSendMessageClick}>Send</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React, {ComponentType} from 'react';\r\n//import s from './Dialogs.module.css';//\r\nimport {InitialStateType, sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: ()=> void\r\n    updateNewMessageBody: (body: string)=> void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType=> {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage :()=>{\r\n            dispatch(sendMessageCreator())\r\n        },\r\n        updateNewMessageBody:(body: string)=>{\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","export default __webpack_public_path__ + \"static/media/preloader.f4b600c5.svg\";","import preloader from \"../../../assets/images/preloader.svg\";\r\nimport React from \"react\";\r\n\r\ntype PreloaderPropsType ={\r\n}\r\n\r\nexport const Preloader = (props: PreloaderPropsType) => {\r\n    return <div>\r\n         <img src = {preloader}/>\r\n    </div>\r\n}","import React from 'react';\r\n\r\n\r\n/*type ProfileStatusType = {\r\n    profile: ProfileType | null\r\n}*/\r\n\r\n\r\nclass ProfileStatus extends React.Component <any, any> {\r\n    state = {\r\n        editMode: false,\r\n        title: 'yo'\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        console.log(\"this:\", this)\r\n        this.setState({\r\n                editMode: true\r\n            }\r\n        )\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n                editMode: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status}</span>\r\n                </div>\r\n                }\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.props.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport ProfileImage from '../../../assets/images/profile.jpg'\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport s from './ProfileInfo.module.css';\r\nimport { ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoProps={\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoProps) => {\r\n    if (!props.profile){\r\n        return <Preloader />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n           {/* <div>\r\n                <img alt={\"profile-image\"}  src={ProfileImage} />\r\n            </div>*/}\r\n            <div className ={s.descriptionBlock}>\r\n               <img alt={\"profile-photos-large\"} src={props.profile.photos.large}/>\r\n                {props.profile.contacts.facebook}\r\n                {props.profile.lookingForAJob}\r\n                {props.profile.lookingForAJobDescription}\r\n                {props.profile.fullName}\r\n                {props.profile.userId}\r\n                <ProfileStatus status={\"Hello my friends\"}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\nexport type PostPropsType = {\r\n    post: PostType\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQYtfZRhbGQtq2BapB2MXJfWIO2QriO5Wx3qQ&usqp=CAU'/>\r\n\r\n            {props.post.message}\r\n            <div>\r\n                <span>like </span>\r\n                {props.post.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    const postsElements =\r\n        props.posts.map(p => <Post post={p}/>);\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n        // props.dispatch(addPostActionCreator(props.newPostText))\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newPostText = e.target.value\r\n        props.updateNewPostText(newPostText)      //??????????????????????????????\r\n        // props.dispatch(updateNewPostTextActionCreator(newPostText))\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        value={props.newPostText}\r\n                        onChange={onPostChange}\r\n                        placeholder='Enter your message'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {\r\n    addPost,\r\n    PostType,\r\n    updateNewPostText\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n// export type MyPostsPropsType = {\r\n//     store: ReduxStoreType\r\n//     posts: Array<PostType>\r\n//     newPostText: string\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost:() => void\r\n    updateNewPostText:(text: string)=> void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost:()=>{\r\n            dispatch(addPost())\r\n        },\r\n        updateNewPostText:(text: string)=>{\r\n            dispatch(updateNewPostText(text))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType | null\r\n}\r\n\r\nconst Profile = (props: ProfileProps) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n}\r\n\r\nexport type OwnProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfilePropsType = RouteComponentProps<PathParamsType> & OwnProfilePropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = 2\r\n        }\r\n        this.props.getUserProfile(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getUserProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.482a5a35.png\";","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {InitialStateType} from \"../../redux/users-reducer\";\r\n\r\ntype UsersProps = {\r\n    usersPage: InitialStateType\r\n    pageSize: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    toggleFollowingProgress:(isFetching: boolean, userId: number)=>void\r\n}\r\n\r\n\r\nexport const Users = (props:UsersProps) => {\r\n    let state = props.usersPage\r\n\r\n    let pagesCount = Math.ceil(state.totalUsersCount / state.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={state.currentPage === p ? styles.selectedPage: ''}\r\n                    onClick={(e) => {\r\n                        props.onPageChanged(p)\r\n                    }}>{p}</span>\r\n            })}\r\n        </div>\r\n        { props.usersPage.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to = {'/profile' + u.id}>\r\n                        <img alt={\"photos-small\"} src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                        </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={state.followingInProgress.some(id =>id===u.id)}\r\n                                      onClick={() => {props.unfollow( u.id)}}>Unfollow </button>\r\n                            : <button disabled={state.followingInProgress.some(id=>id===u.id)}\r\n                                      onClick={() => {props.follow( u.id)}}>Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n\r\n                </span>\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, getUsers,\r\n    InitialStateType,\r\n    setCurrentPage, toggleFollowingProgress,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: InitialStateType\r\n    users: Array<any>,\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    toggleFollowingProgress:(isFetching: boolean, userId: number)=>void\r\n    getUsers: (pageNumber: number, pageSize: number)=> void\r\n    //onPageChanged:(currentPage: number)=> void\r\n\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        debugger\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n        {this.props.isFetching ? <Preloader/> : null}\r\n        <Users\r\n            usersPage={this.props.usersPage}\r\n            onPageChanged={this.onPageChanged}\r\n            follow={this.props.follow}\r\n            unfollow={this.props.unfollow}\r\n            toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n            pageSize={this.props.pageSize}\r\n        />\r\n    </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage,\r\n        users: state.usersPage.users,\r\n        currentPage: state.usersPage.currentPage,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        pageSize: state.usersPage.pageSize,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    connect(\r\n        mapStateToProps,\r\n        { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers}\r\n    )\r\n)(UsersContainer)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderPropsType={\r\n    isAuth: boolean\r\n    login: string | null\r\n    getAuthUserData: ()=>void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://go.imgsmail.ru/imgpreview?key=28651f27816ee8f0&mb=imgdb_preview_exp'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? props.login\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n\r\n        </header>\r\n    );\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType={\r\n\r\n    isAuth:boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchToProps={\r\n    getAuthUserData: ()=>void\r\n}\r\n\r\nexport type AuthPropsType= MapStateToPropsType & MapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n    componentDidMount() {\r\n       this.props.getAuthUserData()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login:state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps,\r\n    {getAuthUserData}) (HeaderContainer);\r\n","import React from \"react\";\r\n\r\ntype LoginPropsType={\r\n\r\n}\r\n\r\nconst Login=(props: LoginPropsType)=>{\r\n    return <h1>LOGIN</h1>\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport { Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileInfo/ProfileContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\n\n\ntype AppPropsType ={\n\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n\n\n  return (\n      <div className='app-wrapper'>\n        <HeaderContainer/>\n        <Navbar/>\n        <div className='app-wrapper-content'>\n\n          <Route path='/news' component={News}/>\n          <Route path='/music' component={Music}/>\n          <Route path='/settings' component={Settings}/>\n\n          <Route path='/profile/:userId?'\n                 render={() => <ProfileContainer/>}/>\n\n          <Route path='/dialogs'\n                 render={() => <DialogsContainer/>}/>\n\n            <Route path='/users'\n                   render={() => <UsersContainer/>}/>\n\n            <Route path='/login'\n                   render={() => <Login/>}/>\n\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from \"react-dom\";\nimport {HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport React from \"react\";\nimport {Provider} from \"react-redux\";\n\n\n\n\n\nlet rerenderEntireTree =()=>{\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store ={store}>\n            <App\n                // state={store.getState() }\n                // store={store}\n                // dispatch={store.dispatch.bind(store.dispatch)}  //bind - связывать\n            />\n            </Provider>\n        </HashRouter>,\n        document.getElementById('root')\n    );\n}\nrerenderEntireTree()\n//\n// store.subscribe(()=> {\n//     let state=store.getState()\n//     rerenderEntireTree()\n// })\n\n\n"],"sourceRoot":""}